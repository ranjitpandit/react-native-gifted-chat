diff --git a/src/Bubble.js b/src/Bubble.js
index bed58c3..de59345 100644
--- a/src/Bubble.js
+++ b/src/Bubble.js
@@ -23,6 +23,7 @@ export default class Bubble extends React.Component {
   constructor(props) {
     super(props);
     this.onLongPress = this.onLongPress.bind(this);
+    this.detectDoubleTap = this.detectDoubleTap.bind(this);
   }
 
   onLongPress() {
@@ -134,6 +135,19 @@ export default class Bubble extends React.Component {
     return null;
   }
 
+  detectDoubleTap () {
+    const now = new Date().getTime()
+    if (this.lastTap && (now - this.lastTap) < 300) {
+      delete this.lastTap
+      if (this.props.onDoubleTap) {
+        this.props.onDoubleTap(this.context, this.props.currentMessage);
+      }
+    }
+    else {
+      this.lastTap = now
+    }
+  }
+
   render() {
     return (
       <View
@@ -152,6 +166,7 @@ export default class Bubble extends React.Component {
         >
           <TouchableWithoutFeedback
             onLongPress={this.onLongPress}
+            onPress={this.props.onDoubleTap? this.detectDoubleTap:null}
             accessibilityTraits="text"
             {...this.props.touchableProps}
           >
@@ -233,6 +248,7 @@ Bubble.contextTypes = {
 Bubble.defaultProps = {
   touchableProps: {},
   onLongPress: null,
+  onDoubleTap: null,
   renderMessageImage: null,
   renderMessageText: null,
   renderCustomView: null,
@@ -261,6 +277,7 @@ Bubble.propTypes = {
   user: PropTypes.object.isRequired,
   touchableProps: PropTypes.object,
   onLongPress: PropTypes.func,
+  onDoubleTap: PropTypes.func,
   renderMessageImage: PropTypes.func,
   renderMessageText: PropTypes.func,
   renderCustomView: PropTypes.func,
diff --git a/src/GiftedChat.js b/src/GiftedChat.js
index 4f8e843..875d15b 100644
--- a/src/GiftedChat.js
+++ b/src/GiftedChat.js
@@ -301,6 +301,11 @@ class GiftedChat extends React.Component {
     this._messageContainerRef.scrollTo({ y: 0, animated });
   }
 
+  scrollTo(options) {
+      if (this._messageContainerRef) {
+          this._messageContainerRef.scrollTo(options);
+      }
+  }
 
   renderMessages() {
     const AnimatedView = this.props.isAnimated === true ? Animated.View : View;
